{"version":3,"file":"static/js/npm.ctrl+tinycolor@3.6.1.node_modules.91205b99.js","mappings":"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","sources":["webpack://@sinsa/web/../../node_modules/.pnpm/@ctrl+tinycolor@3.6.1/node_modules/@ctrl/tinycolor/dist/module/conversion.js","webpack://@sinsa/web/../../node_modules/.pnpm/@ctrl+tinycolor@3.6.1/node_modules/@ctrl/tinycolor/dist/module/css-color-names.js","webpack://@sinsa/web/../../node_modules/.pnpm/@ctrl+tinycolor@3.6.1/node_modules/@ctrl/tinycolor/dist/module/format-input.js","webpack://@sinsa/web/../../node_modules/.pnpm/@ctrl+tinycolor@3.6.1/node_modules/@ctrl/tinycolor/dist/module/index.js","webpack://@sinsa/web/../../node_modules/.pnpm/@ctrl+tinycolor@3.6.1/node_modules/@ctrl/tinycolor/dist/module/util.js"],"sourcesContent":["import { bound01, pad2 } from './util.js';\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * <http://www.w3.org/TR/css3-color/>\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\n * *Returns:* { r, g, b } in [0, 255]\n */\nexport function rgbToRgb(r, g, b) {\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255,\n    };\n}\n/**\n * Converts an RGB color value to HSL.\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n * *Returns:* { h, s, l } in [0,1]\n */\nexport function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (max + min) / 2;\n    if (max === min) {\n        s = 0;\n        h = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, l: l };\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * (6 * t);\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n/**\n * Converts an HSL color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hslToRgb(h, s, l) {\n    var r;\n    var g;\n    var b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    if (s === 0) {\n        // achromatic\n        g = l;\n        b = l;\n        r = l;\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color value to HSV\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n * *Returns:* { h, s, v } in [0,1]\n */\nexport function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var v = max;\n    var d = max - min;\n    var s = max === 0 ? 0 : d / max;\n    if (max === min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n/**\n * Converts an HSV color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h);\n    var f = h - i;\n    var p = v * (1 - s);\n    var q = v * (1 - f * s);\n    var t = v * (1 - (1 - f) * s);\n    var mod = i % 6;\n    var r = [v, q, p, p, t, v][mod];\n    var g = [t, v, v, q, p, p][mod];\n    var b = [p, p, t, v, v, q][mod];\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */\nexport function rgbToHex(r, g, b, allow3Char) {\n    var hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    // Return a 3 character hex if possible\n    if (allow3Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color plus alpha transparency to hex\n *\n * Assumes r, g, b are contained in the set [0, 255] and\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\n */\n// eslint-disable-next-line max-params\nexport function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n        pad2(convertDecimalToHex(a)),\n    ];\n    // Return a 4 character hex if possible\n    if (allow4Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1)) &&\n        hex[3].startsWith(hex[3].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color to an ARGB Hex8 string\n * Rarely used, but required for \"toFilter()\"\n */\nexport function rgbaToArgbHex(r, g, b, a) {\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    return hex.join('');\n}\n/** Converts a decimal to a hex value */\nexport function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n/** Converts a hex value to a decimal */\nexport function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n}\n/** Parse a base-16 hex value into a base-10 integer */\nexport function parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\nexport function numberInputToObject(color) {\n    return {\n        r: color >> 16,\n        g: (color & 0xff00) >> 8,\n        b: color & 0xff,\n    };\n}\n","// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\n/**\n * @hidden\n */\nexport var names = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    goldenrod: '#daa520',\n    gold: '#ffd700',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavenderblush: '#fff0f5',\n    lavender: '#e6e6fa',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32',\n};\n","/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\nimport { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb, } from './conversion.js';\nimport { names } from './css-color-names.js';\nimport { boundAlpha, convertToPercentage } from './util.js';\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */\nexport function inputToRGB(color) {\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color === 'string') {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === 'object') {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = 'hsv';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = 'hsl';\n        }\n        if (Object.prototype.hasOwnProperty.call(color, 'a')) {\n            a = color.a;\n        }\n    }\n    a = boundAlpha(a);\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a: a,\n    };\n}\n// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nvar CSS_UNIT = \"(?:\".concat(CSS_NUMBER, \")|(?:\").concat(CSS_INTEGER, \")\");\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nexport function stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color === 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match = matchers.rgb.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            a: convertHexToDecimal(match[4] + match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    return false;\n}\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport function isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n","import { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion.js';\nimport { names } from './css-color-names.js';\nimport { inputToRGB } from './format-input';\nimport { bound01, boundAlpha, clamp01 } from './util.js';\nvar TinyColor = /** @class */ (function () {\n    function TinyColor(color, opts) {\n        if (color === void 0) { color = ''; }\n        if (opts === void 0) { opts = {}; }\n        var _a;\n        // If input is already a tinycolor, return itself\n        if (color instanceof TinyColor) {\n            // eslint-disable-next-line no-constructor-return\n            return color;\n        }\n        if (typeof color === 'number') {\n            color = numberInputToObject(color);\n        }\n        this.originalInput = color;\n        var rgb = inputToRGB(color);\n        this.originalInput = color;\n        this.r = rgb.r;\n        this.g = rgb.g;\n        this.b = rgb.b;\n        this.a = rgb.a;\n        this.roundA = Math.round(100 * this.a) / 100;\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n        this.gradientType = opts.gradientType;\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this.r < 1) {\n            this.r = Math.round(this.r);\n        }\n        if (this.g < 1) {\n            this.g = Math.round(this.g);\n        }\n        if (this.b < 1) {\n            this.b = Math.round(this.b);\n        }\n        this.isValid = rgb.ok;\n    }\n    TinyColor.prototype.isDark = function () {\n        return this.getBrightness() < 128;\n    };\n    TinyColor.prototype.isLight = function () {\n        return !this.isDark();\n    };\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     */\n    TinyColor.prototype.getBrightness = function () {\n        // http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    };\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     */\n    TinyColor.prototype.getLuminance = function () {\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var R;\n        var G;\n        var B;\n        var RsRGB = rgb.r / 255;\n        var GsRGB = rgb.g / 255;\n        var BsRGB = rgb.b / 255;\n        if (RsRGB <= 0.03928) {\n            R = RsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (GsRGB <= 0.03928) {\n            G = GsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (BsRGB <= 0.03928) {\n            B = BsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    };\n    /**\n     * Returns the alpha value of a color, from 0-1.\n     */\n    TinyColor.prototype.getAlpha = function () {\n        return this.a;\n    };\n    /**\n     * Sets the alpha value on the current color.\n     *\n     * @param alpha - The new alpha value. The accepted range is 0-1.\n     */\n    TinyColor.prototype.setAlpha = function (alpha) {\n        this.a = boundAlpha(alpha);\n        this.roundA = Math.round(100 * this.a) / 100;\n        return this;\n    };\n    /**\n     * Returns whether the color is monochrome.\n     */\n    TinyColor.prototype.isMonochrome = function () {\n        var s = this.toHsl().s;\n        return s === 0;\n    };\n    /**\n     * Returns the object as a HSVA object.\n     */\n    TinyColor.prototype.toHsv = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\n    };\n    /**\n     * Returns the hsva values interpolated into a string with the following format:\n     * \"hsva(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHsvString = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        var h = Math.round(hsv.h * 360);\n        var s = Math.round(hsv.s * 100);\n        var v = Math.round(hsv.v * 100);\n        return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a HSLA object.\n     */\n    TinyColor.prototype.toHsl = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\n    };\n    /**\n     * Returns the hsla values interpolated into a string with the following format:\n     * \"hsla(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHslString = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        var h = Math.round(hsl.h * 360);\n        var s = Math.round(hsl.s * 100);\n        var l = Math.round(hsl.l * 100);\n        return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the hex value of the color.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHex = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\n    };\n    /**\n     * Returns the hex value of the color -with a # prefixed.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHexString = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return '#' + this.toHex(allow3Char);\n    };\n    /**\n     * Returns the hex 8 value of the color.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8 = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n    };\n    /**\n     * Returns the hex 8 value of the color -with a # prefixed.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8String = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return '#' + this.toHex8(allow4Char);\n    };\n    /**\n     * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.\n     * @param allowShortChar will shorten hex value to 3 or 4 char if possible\n     */\n    TinyColor.prototype.toHexShortString = function (allowShortChar) {\n        if (allowShortChar === void 0) { allowShortChar = false; }\n        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toRgb = function () {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA values interpolated into a string with the following format:\n     * \"RGBA(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toRgbString = function () {\n        var r = Math.round(this.r);\n        var g = Math.round(this.g);\n        var b = Math.round(this.b);\n        return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toPercentageRgb = function () {\n        var fmt = function (x) { return \"\".concat(Math.round(bound01(x, 255) * 100), \"%\"); };\n        return {\n            r: fmt(this.r),\n            g: fmt(this.g),\n            b: fmt(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA relative values interpolated into a string\n     */\n    TinyColor.prototype.toPercentageRgbString = function () {\n        var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };\n        return this.a === 1\n            ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\")\n            : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * The 'real' name of the color -if there is one.\n     */\n    TinyColor.prototype.toName = function () {\n        if (this.a === 0) {\n            return 'transparent';\n        }\n        if (this.a < 1) {\n            return false;\n        }\n        var hex = '#' + rgbToHex(this.r, this.g, this.b, false);\n        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (hex === value) {\n                return key;\n            }\n        }\n        return false;\n    };\n    TinyColor.prototype.toString = function (format) {\n        var formatSet = Boolean(format);\n        format = format !== null && format !== void 0 ? format : this.format;\n        var formattedString = false;\n        var hasAlpha = this.a < 1 && this.a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === 'name' && this.a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === 'rgb') {\n            formattedString = this.toRgbString();\n        }\n        if (format === 'prgb') {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === 'hex' || format === 'hex6') {\n            formattedString = this.toHexString();\n        }\n        if (format === 'hex3') {\n            formattedString = this.toHexString(true);\n        }\n        if (format === 'hex4') {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === 'hex8') {\n            formattedString = this.toHex8String();\n        }\n        if (format === 'name') {\n            formattedString = this.toName();\n        }\n        if (format === 'hsl') {\n            formattedString = this.toHslString();\n        }\n        if (format === 'hsv') {\n            formattedString = this.toHsvString();\n        }\n        return formattedString || this.toHexString();\n    };\n    TinyColor.prototype.toNumber = function () {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    };\n    TinyColor.prototype.clone = function () {\n        return new TinyColor(this.toString());\n    };\n    /**\n     * Lighten the color a given amount. Providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.lighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Brighten the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.brighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var rgb = this.toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return new TinyColor(rgb);\n    };\n    /**\n     * Darken the color a given amount, from 0 to 100.\n     * Providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.darken = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.tint = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('white', amount);\n    };\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.shade = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('black', amount);\n    };\n    /**\n     * Desaturate the color a given amount, from 0 to 100.\n     * Providing 100 will is the same as calling greyscale\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.desaturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Saturate the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.saturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Completely desaturates a color into greyscale.\n     * Same as calling `desaturate(100)`\n     */\n    TinyColor.prototype.greyscale = function () {\n        return this.desaturate(100);\n    };\n    /**\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n     * Values outside of this range will be wrapped into this range.\n     */\n    TinyColor.prototype.spin = function (amount) {\n        var hsl = this.toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */\n    TinyColor.prototype.mix = function (color, amount) {\n        if (amount === void 0) { amount = 50; }\n        var rgb1 = this.toRgb();\n        var rgb2 = new TinyColor(color).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\n        };\n        return new TinyColor(rgba);\n    };\n    TinyColor.prototype.analogous = function (results, slices) {\n        if (results === void 0) { results = 6; }\n        if (slices === void 0) { slices = 30; }\n        var hsl = this.toHsl();\n        var part = 360 / slices;\n        var ret = [this];\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(new TinyColor(hsl));\n        }\n        return ret;\n    };\n    /**\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n     */\n    TinyColor.prototype.complement = function () {\n        var hsl = this.toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return new TinyColor(hsl);\n    };\n    TinyColor.prototype.monochromatic = function (results) {\n        if (results === void 0) { results = 6; }\n        var hsv = this.toHsv();\n        var h = hsv.h;\n        var s = hsv.s;\n        var v = hsv.v;\n        var res = [];\n        var modification = 1 / results;\n        while (results--) {\n            res.push(new TinyColor({ h: h, s: s, v: v }));\n            v = (v + modification) % 1;\n        }\n        return res;\n    };\n    TinyColor.prototype.splitcomplement = function () {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        return [\n            this,\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n        ];\n    };\n    /**\n     * Compute how the color would appear on a background\n     */\n    TinyColor.prototype.onBackground = function (background) {\n        var fg = this.toRgb();\n        var bg = new TinyColor(background).toRgb();\n        var alpha = fg.a + bg.a * (1 - fg.a);\n        return new TinyColor({\n            r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,\n            g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,\n            b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,\n            a: alpha,\n        });\n    };\n    /**\n     * Alias for `polyad(3)`\n     */\n    TinyColor.prototype.triad = function () {\n        return this.polyad(3);\n    };\n    /**\n     * Alias for `polyad(4)`\n     */\n    TinyColor.prototype.tetrad = function () {\n        return this.polyad(4);\n    };\n    /**\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n     */\n    TinyColor.prototype.polyad = function (n) {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        var result = [this];\n        var increment = 360 / n;\n        for (var i = 1; i < n; i++) {\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\n        }\n        return result;\n    };\n    /**\n     * compare color vs current color\n     */\n    TinyColor.prototype.equals = function (color) {\n        return this.toRgbString() === new TinyColor(color).toRgbString();\n    };\n    return TinyColor;\n}());\nexport { TinyColor };\n// kept for backwards compatability with v1\nexport function tinycolor(color, opts) {\n    if (color === void 0) { color = ''; }\n    if (opts === void 0) { opts = {}; }\n    return new TinyColor(color, opts);\n}\n","/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */\nexport function bound01(n, max) {\n    if (isOnePointZero(n)) {\n        n = '100%';\n    }\n    var isPercent = isPercentage(n);\n    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n    // Automatically convert percentage into number\n    if (isPercent) {\n        n = parseInt(String(n * max), 10) / 100;\n    }\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n        return 1;\n    }\n    // Convert into [0, 1] range if it isn't already\n    if (max === 360) {\n        // If n is a hue given in degrees,\n        // wrap around out-of-range values into [0, 360] range\n        // then convert into [0, 1].\n        n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\n    }\n    else {\n        // If n not a hue given in degrees\n        // Convert into [0, 1] range if it isn't already.\n        n = (n % max) / parseFloat(String(max));\n    }\n    return n;\n}\n/**\n * Force a number between 0 and 1\n * @hidden\n */\nexport function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n}\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */\nexport function isOnePointZero(n) {\n    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\n}\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */\nexport function isPercentage(n) {\n    return typeof n === 'string' && n.indexOf('%') !== -1;\n}\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */\nexport function boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n    return a;\n}\n/**\n * Replace a decimal with it's percentage value\n * @hidden\n */\nexport function convertToPercentage(n) {\n    if (n <= 1) {\n        return \"\".concat(Number(n) * 100, \"%\");\n    }\n    return n;\n}\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */\nexport function pad2(c) {\n    return c.length === 1 ? '0' + c : String(c);\n}\n"],"names":["rgbToRgb","r","g","b","rgbToHsl","max","Math","min","h","s","l","d","hue2rgb","p","q","t","hslToRgb","rgbToHsv","v","hsvToRgb","i","floor","f","mod","rgbToHex","allow3Char","hex","round","toString","startsWith","charAt","join","rgbaToHex","a","allow4Char","convertDecimalToHex","parseFloat","convertHexToDecimal","parseIntFromHex","val","parseInt","numberInputToObject","color","names","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","goldenrod","gold","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavenderblush","lavender","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","inputToRGB","rgb","ok","format","trim","toLowerCase","length","named","match","matchers","exec","rgba","hsl","hsla","hsv","hsva","hex8","hex6","hex4","hex3","stringInputToObject","isValidCSSUnit","String","substr","Object","prototype","hasOwnProperty","call","CSS_UNIT","concat","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","Boolean","TinyColor","opts","_a","this","originalInput","roundA","gradientType","isValid","isDark","getBrightness","isLight","toRgb","getLuminance","RsRGB","GsRGB","BsRGB","pow","getAlpha","setAlpha","alpha","isMonochrome","toHsl","toHsv","toHsvString","toHslString","toHex","toHexString","toHex8","toHex8String","toHexShortString","allowShortChar","toRgbString","toPercentageRgb","fmt","x","toPercentageRgbString","rnd","toName","_i","entries","_b","key","formatSet","formattedString","hasAlpha","toNumber","clone","lighten","amount","brighten","darken","tint","mix","shade","desaturate","saturate","greyscale","spin","hue","rgb1","rgb2","analogous","results","slices","part","ret","push","complement","monochromatic","res","modification","splitcomplement","onBackground","background","fg","bg","triad","polyad","tetrad","n","result","increment","equals","bound01","indexOf","isOnePointZero","isPercent","isPercentage","abs","clamp01","boundAlpha","isNaN","convertToPercentage","Number","pad2","c"],"sourceRoot":""}