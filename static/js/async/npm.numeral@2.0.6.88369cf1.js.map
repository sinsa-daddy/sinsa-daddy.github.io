{"version":3,"file":"static/js/async/npm.numeral@2.0.6.88369cf1.js","mappings":"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","sources":["webpack://@sinsa/web/../../node_modules/.pnpm/numeral@2.0.6/node_modules/numeral/numeral.js"],"sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n"],"names":["numeral","_","decimal","binary","unformatRegex","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray"],"sourceRoot":""}