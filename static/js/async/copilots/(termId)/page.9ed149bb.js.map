{"version":3,"file":"static/js/async/copilots/(termId)/page.9ed149bb.js","sources":["webpack://@sinsa/web/./src/components/BossCard/index.tsx","webpack://@sinsa/web/./src/components/SolutionCard/CopilotBlock/constants.ts","webpack://@sinsa/web/./src/components/SolutionCard/CopilotBlock/index.tsx","webpack://@sinsa/web/./src/components/TermChanger.tsx","webpack://@sinsa/web/./src/components/TermNotFound.tsx","webpack://@sinsa/web/./src/routes/copilots/[termId]/page.tsx","webpack://@sinsa/web/./src/services/matchup.ts","webpack://@sinsa/web/./src/views/CopilotsView/CopilotListView/CopilotSortContext/index.tsx","webpack://@sinsa/web/./src/views/CopilotsView/CopilotListView/CopilotSortContext/select.tsx","webpack://@sinsa/web/./src/views/CopilotsView/CopilotListView/CopilotSortContext/types.ts","webpack://@sinsa/web/./src/views/CopilotsView/CopilotListView/index.tsx","webpack://@sinsa/web/./src/views/CopilotsView/index.tsx"],"sourcesContent":["import type { TermNextType } from '@sinsa/schema';\nimport { Card, Flex } from 'antd';\nimport React, { useMemo } from 'react';\nimport { RelativeTimeText } from '../RelativeTimeText';\nimport { ElementURLMapper } from '../AdaptiveAurorianCard/constants';\nimport styles from './styles.module.less';\nimport { REVERSED_MATCH_UP } from '@/services/matchup';\n\nexport interface BossCardProps {\n  term: TermNextType;\n}\n\nexport const BossCard = React.memo<BossCardProps>(\n  ({ term }) => {\n    const { boss_name, features, end_time, boss_element } = term;\n\n    const reversedMatchedElement = useMemo(() => {\n      return REVERSED_MATCH_UP[boss_element];\n    }, [boss_element]);\n\n    return (\n      <Card className={styles.Card}>\n        <Flex vertical={true} gap={4}>\n          <Flex align=\"center\" gap={4} wrap=\"nowrap\">\n            <span className={styles.BossName}>{boss_name}</span>\n            <img\n              className={styles.MetaFirstAttribute}\n              alt={boss_element}\n              src={ElementURLMapper[boss_element]}\n            />\n          </Flex>\n          <span className={styles.EndTimeContainer}>\n            <RelativeTimeText time={end_time} />\n            结束\n          </span>\n          <ul className={styles.FeaturesContainer}>\n            <li key={'matchup'}>\n              <img\n                className={styles.FeatureElement}\n                alt={reversedMatchedElement}\n                src={ElementURLMapper[reversedMatchedElement]}\n              />\n              {'  '}\n              属性克制伤害增加 100%\n            </li>\n            {features.split('\\n').map(text => {\n              return <li key={text}>{text}</li>;\n            })}\n          </ul>\n        </Flex>\n      </Card>\n    );\n  },\n  (a, b) => a.term.term_id === b.term.term_id,\n);\n","import type { CopilotNextAssetType } from '@sinsa/schema';\n\nexport const AssetTypeTextMapper: Record<CopilotNextAssetType['type'], string> =\n  {\n    script33: '三十三号脚本',\n  };\n","import { clsx } from 'clsx';\nimport {\n  Button,\n  Dropdown,\n  Flex,\n  Popconfirm,\n  Space,\n  Tag,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport React, { useCallback, useMemo } from 'react';\nimport numeral from 'numeral';\nimport { useBreakpoint } from '@ant-design/pro-components';\nimport {\n  MessageOne,\n  More,\n  Paperclip,\n  PreviewCloseOne,\n  Bug,\n} from '@icon-park/react';\nimport type {\n  AurorianNextType,\n  CopilotNextType,\n  TermNextType,\n} from '@sinsa/schema';\nimport { AdaptiveAuroriansTeam } from './AdaptiveAuroriansTeam';\nimport styles from './styles.module.less';\nimport { AssetTypeTextMapper } from './constants';\nimport { RelativeTimeText } from '@/components/RelativeTimeText';\nimport { trimTitle } from '@/components/utils';\nimport { useSolutionResultContext } from '@/views/SolutionView/context';\nimport { QueryFormAction } from '@/views/SolutionView/hooks/use-trigger-form-action/constants';\n\ninterface CopilotBlockProps {\n  copilot: CopilotNextType;\n  currentTerm: TermNextType;\n  className?: string;\n\n  readOnly?: boolean;\n}\n\nenum MenuKey {\n  IgnoreCopilot = 'IgnoreCopilot',\n}\n\nfunction useLarge() {\n  const screen = useBreakpoint();\n  const isLarge = useMemo(\n    () => screen === 'lg' || screen === 'xl' || screen === 'xxl',\n    [screen],\n  );\n\n  return isLarge;\n}\n\nexport const CopilotBlock = React.memo<CopilotBlockProps>(\n  ({ copilot, currentTerm, className, readOnly }) => {\n    const isLarge = useLarge();\n    const hasAsset = useMemo(() => {\n      return Array.isArray(copilot.assets);\n    }, [copilot.assets]);\n\n    const displayTitle = useMemo(\n      () => trimTitle(copilot.title),\n      [copilot.title],\n    );\n\n    const { triggerFormAction } = useSolutionResultContext();\n\n    const handleClickMenu = useCallback(\n      (info: { key: string }) => {\n        switch (info.key) {\n          case MenuKey.IgnoreCopilot:\n            triggerFormAction({\n              type: QueryFormAction.IgnoreCopilot,\n              copilot,\n            });\n            break;\n          default:\n            break;\n        }\n      },\n      [copilot.copilot_id],\n    );\n\n    const handleReplace = useCallback(\n      (_aurorian: AurorianNextType) => {\n        triggerFormAction({\n          type: QueryFormAction.ReplaceAurorian,\n          aurorian: _aurorian,\n          copilot,\n          currentTerm,\n        });\n      },\n      [copilot.copilot_id, currentTerm.term_id],\n    );\n    return (\n      <div className={clsx(styles.CopilotBlock, className)}>\n        <AdaptiveAuroriansTeam\n          aurorianRequirements={copilot.aurorian_requirements}\n          readOnly={readOnly}\n          onReplace={handleReplace}\n        />\n        <div className={styles.PaddingContainer}>\n          <Flex className={styles.Header} wrap=\"nowrap\" align=\"center\">\n            <span className={styles.Score}>\n              {numeral(copilot.score).format('0,0')}\n            </span>\n            <Flex className={styles.Author} align=\"center\" gap={4}>\n              <Space.Compact size=\"small\">\n                {!readOnly ? (\n                  <Dropdown\n                    menu={{\n                      items: [\n                        {\n                          key: MenuKey.IgnoreCopilot,\n                          label: (\n                            <span>\n                              <PreviewCloseOne /> 排除此作业\n                            </span>\n                          ),\n                        },\n                      ],\n                      onClick: handleClickMenu,\n                    }}\n                  >\n                    <Button icon={<More />} />\n                  </Dropdown>\n                ) : null}\n\n                <Button\n                  icon={\n                    <Tooltip title=\"报告收录错误\">\n                      <Bug />\n                    </Tooltip>\n                  }\n                  onClick={e => {\n                    e.stopPropagation();\n                    const params = {\n                      有收录问题的作业所在荒典期数: copilot.term_id,\n                      有收录问题的作业视频链接: `${copilot.author_name} ${copilot.title} https://www.bilibili.com/video/${copilot.href}`,\n                    };\n\n                    const queryString = Object.entries(params)\n                      .map(\n                        ([key, value]) =>\n                          `prefill_${window.encodeURIComponent(\n                            key,\n                          )}=${window.encodeURIComponent(value)}`,\n                      )\n                      .join('&');\n                    window.open(\n                      `https://fwf92qm5h53.feishu.cn/share/base/form/shrcnFMYfIOulCFwcl5ELDfGCVf?${queryString}`,\n                      '_blank',\n                    );\n                  }}\n                />\n              </Space.Compact>\n              <RelativeTimeText time={copilot.upload_time} />\n\n              {copilot.description && !isLarge ? (\n                <Tooltip title={copilot.description}>\n                  {copilot.description ? <MessageOne size={18} /> : null}\n                </Tooltip>\n              ) : null}\n\n              <span\n                className={clsx(\n                  styles.AuthorName,\n                  !isLarge && styles.AuthorSmall,\n                )}\n              >\n                {copilot.author_name}\n              </span>\n            </Flex>\n          </Flex>\n          <div className={styles.Title}>\n            <Typography.Link\n              href={`https://www.bilibili.com/video/${copilot.href}`}\n              target=\"_blank\"\n              title={copilot.title}\n              ellipsis={true}\n            >\n              {currentTerm?.term_id &&\n              copilot.term_id !== currentTerm.term_id ? (\n                <Tooltip title={`复刻 ${copilot.term_id} 期荒典`}>\n                  <Tag color=\"red\">复刻</Tag>\n                </Tooltip>\n              ) : null}\n              {displayTitle}\n            </Typography.Link>\n          </div>\n          {copilot.description && isLarge ? (\n            <Typography.Paragraph type=\"secondary\">\n              {copilot.description}\n            </Typography.Paragraph>\n          ) : null}\n          {hasAsset && isLarge\n            ? copilot.assets?.map((asset, index) => (\n                <Popconfirm\n                  // eslint-disable-next-line react/no-array-index-key\n                  key={`${asset.type}${index}`}\n                  okText=\"确认\"\n                  title=\"此资源仅为临时存档。是否开始下载？\"\n                  onConfirm={() => {\n                    const el = document.createElement('a');\n                    el.href = asset.script33.link;\n                    el.click();\n                  }}\n                >\n                  <Typography.Link>\n                    <Paperclip /> {AssetTypeTextMapper[asset.type]}\n                    存档\n                  </Typography.Link>\n                </Popconfirm>\n              ))\n            : null}\n        </div>\n      </div>\n    );\n  },\n  (prev, next) =>\n    prev.className === next.className &&\n    prev.copilot.copilot_id === next.copilot.copilot_id &&\n    prev.currentTerm.term_id === next.currentTerm.term_id,\n);\n","import { useModel } from '@modern-js/runtime/model';\nimport { Select } from 'antd';\nimport { useNavigate, useParams } from '@modern-js/runtime/router';\nimport { useMemo } from 'react';\nimport { TermsModel } from '@/models/terms';\nimport type { RoutePath } from '@/views/GlobalLayout/constants';\n\nexport function useTargetTermFromParams() {\n  const params = useParams<{ termId: string | 'latest' }>();\n  const [{ termsMap, latestTerm }] = useModel(TermsModel);\n\n  const targetTerm = useMemo(() => {\n    if (!params.termId) {\n      return undefined;\n    }\n    return params.termId === 'latest' ? latestTerm : termsMap[params.termId];\n  }, [params.termId, latestTerm?.term_id]);\n\n  return {\n    targetTerm,\n  };\n}\n\nexport const TermChanger: React.FC<{\n  pathFn: typeof RoutePath.Copilots | typeof RoutePath.Solutions;\n}> = ({ pathFn }) => {\n  const [terms] = useModel(TermsModel);\n  const { targetTerm } = useTargetTermFromParams();\n  const navigate = useNavigate();\n\n  return (\n    <Select\n      value={targetTerm?.term_id}\n      options={terms.termsOptions}\n      placeholder=\"荒典期数\"\n      onChange={nextTerm => {\n        navigate(\n          pathFn(nextTerm === terms.latestTerm?.term_id ? 'latest' : nextTerm),\n        );\n      }}\n    />\n  );\n};\n","import { useModel } from '@modern-js/runtime/model';\nimport { Button, Result } from 'antd';\nimport { Link } from '@modern-js/runtime/router';\nimport { TermsModel } from '@/models/terms';\nimport { RoutePath } from '@/views/GlobalLayout/constants';\nimport SINSA_SORRY_URL from '@/assets/sinsa/sorry.png';\n\nexport const TermNotFound: React.FC = () => {\n  const [{ latestTerm }] = useModel(TermsModel);\n\n  return (\n    <Result\n      title=\"暂时没有这期荒典作业\"\n      subTitle=\"检查链接是否正确或返回最近荒典作业\"\n      icon={<img alt=\"未找到作业\" src={SINSA_SORRY_URL} />}\n      extra={\n        latestTerm ? (\n          <Link to={RoutePath.Copilots('latest')}>\n            <Button type=\"primary\">返回最近作业</Button>\n          </Link>\n        ) : (\n          <Link to={RoutePath.Home}>\n            <Button type=\"primary\">返回首页</Button>\n          </Link>\n        )\n      }\n    />\n  );\n};\n","/* eslint-disable no-nested-ternary */\nimport { useRequest } from 'ahooks';\nimport { PageContainer } from '@ant-design/pro-components';\nimport { useMemo } from 'react';\nimport { Flex, Space } from 'antd';\nimport { TermNotFound } from '@/components/TermNotFound';\nimport { TermChanger, useTargetTermFromParams } from '@/components/TermChanger';\nimport { getCopilots } from '@/services/http';\nimport { RoutePath } from '@/views/GlobalLayout/constants';\nimport { CopilotsView } from '@/views/CopilotsView';\nimport { CopilotSorterProvider } from '@/views/CopilotsView/CopilotListView/CopilotSortContext';\nimport { CopilotSelect } from '@/views/CopilotsView/CopilotListView/CopilotSortContext/select';\nimport { BossCard } from '@/components/BossCard';\n\nconst CopilotsPage: React.FC = () => {\n  const { targetTerm: currentTerm } = useTargetTermFromParams();\n\n  const { data, error, loading } = useRequest(\n    () =>\n      currentTerm?.term_id\n        ? getCopilots(currentTerm.term_id)\n        : (Promise.resolve({}) as ReturnType<typeof getCopilots>),\n    {\n      ready: Boolean(currentTerm?.term_id),\n      refreshDeps: [currentTerm?.term_id],\n    },\n  );\n\n  const copilots = useMemo(() => Object.values(data ?? []), [data]);\n\n  return (\n    <CopilotSorterProvider>\n      <PageContainer\n        content={\n          <Space>\n            <TermChanger pathFn={RoutePath.Copilots} />\n            <CopilotSelect />\n          </Space>\n        }\n        title=\"作业全览\"\n        loading={loading}\n      >\n        <Flex vertical gap=\"middle\">\n          {currentTerm ? <BossCard term={currentTerm} /> : null}\n          {error || !copilots?.length ? (\n            <TermNotFound />\n          ) : currentTerm ? (\n            <CopilotsView currentTerm={currentTerm} copilots={copilots} />\n          ) : (\n            <TermNotFound />\n          )}\n        </Flex>\n      </PageContainer>\n    </CopilotSorterProvider>\n  );\n};\n\nexport default CopilotsPage;\n","import { AurorianAttributeType } from '@sinsa/schema';\n\n/**\n * 克制链\n */\nexport const MATCH_UP: Record<AurorianAttributeType, AurorianAttributeType> = {\n  [AurorianAttributeType.Water]: AurorianAttributeType.Fire,\n  [AurorianAttributeType.Fire]: AurorianAttributeType.Forest,\n  [AurorianAttributeType.Forest]: AurorianAttributeType.Thunder,\n  [AurorianAttributeType.Thunder]: AurorianAttributeType.Water,\n};\n\n/**\n * 被克制链\n */\nexport const REVERSED_MATCH_UP: Record<\n  AurorianAttributeType,\n  AurorianAttributeType\n> = {\n  [AurorianAttributeType.Forest]: AurorianAttributeType.Fire,\n  [AurorianAttributeType.Thunder]: AurorianAttributeType.Forest,\n  [AurorianAttributeType.Water]: AurorianAttributeType.Thunder,\n  [AurorianAttributeType.Fire]: AurorianAttributeType.Water,\n};\n","import constate from 'constate';\nimport { useState } from 'react';\nimport { CopilotSorter } from './types';\n\nexport const [CopilotSorterProvider, useCopilotSorter] = constate(() => {\n  const [sorter, setSorter] = useState(CopilotSorter.UploadTime);\n\n  return {\n    sorter,\n    setSorter,\n  };\n});\n","import { Select } from 'antd';\nimport type React from 'react';\nimport { CopilotSorter } from './types';\nimport { useCopilotSorter } from '.';\n\nconst CopilotSorterOptions = [\n  { label: '按最近上传时间', value: CopilotSorter.UploadTime },\n  { label: '按分数高至低', value: CopilotSorter.Score },\n  { label: '按分数低至高', value: CopilotSorter.ReversedScore },\n];\n\nexport const CopilotSelect: React.FC = () => {\n  const { sorter, setSorter } = useCopilotSorter();\n  return (\n    <Select\n      options={CopilotSorterOptions}\n      value={sorter}\n      onChange={setSorter}\n    />\n  );\n};\n","export enum CopilotSorter {\n  UploadTime = 'UploadTime',\n  Score = 'Score',\n  ReversedScore = 'ReversedScore',\n}\n","import { useMemo, useRef, useState } from 'react';\nimport { Card, List } from 'antd';\nimport type { CopilotNextType, TermNextType } from '@sinsa/schema';\nimport styles from './styles.module.less';\nimport { useCopilotSorter } from './CopilotSortContext';\nimport { CopilotSorter } from './CopilotSortContext/types';\nimport { CopilotBlock } from '@/components/SolutionCard/CopilotBlock';\n\nconst getRowKey = (c: CopilotNextType) => c.copilot_id;\n\ninterface CopilotListViewProps {\n  currentTerm: TermNextType;\n  dataSource: CopilotNextType[];\n}\n\nexport const CopilotListView: React.FC<CopilotListViewProps> = ({\n  currentTerm,\n  dataSource,\n}) => {\n  const inViewRef = useRef<HTMLDivElement>(null);\n  const [current, setCurrent] = useState(1);\n  const { sorter } = useCopilotSorter();\n\n  const displayDataSource = useMemo(() => {\n    switch (sorter) {\n      case CopilotSorter.UploadTime:\n        return dataSource;\n      case CopilotSorter.Score:\n        return Array.from(dataSource).sort((a, b) => b.score - a.score);\n      case CopilotSorter.ReversedScore:\n        return Array.from(dataSource).sort((a, b) => a.score - b.score);\n      default:\n        return dataSource;\n    }\n  }, [dataSource, sorter]);\n\n  const pagination = useMemo(() => {\n    return {\n      align: 'center' as const,\n      defaultPageSize: 5,\n      current,\n      onChange(page: number) {\n        setCurrent(page);\n        window.scrollTo({\n          top: inViewRef.current!.offsetTop,\n          behavior: 'smooth',\n        });\n      },\n      showSizeChanger: false,\n      showTotal(total: number): string {\n        return `总共 ${total} 条作业`;\n      },\n    };\n  }, [current]);\n\n  return (\n    <>\n      <div className={styles.Mount} ref={inViewRef} />\n      <Card className={styles.CopilotCard}>\n        <List<CopilotNextType>\n          dataSource={displayDataSource}\n          pagination={pagination}\n          rowKey={getRowKey}\n          renderItem={item => (\n            <CopilotBlock\n              className={styles.ControlledCopilotBlock}\n              copilot={item}\n              currentTerm={currentTerm}\n              readOnly\n            />\n          )}\n        />\n      </Card>\n    </>\n  );\n};\n","import type { CopilotNextType, TermNextType } from '@sinsa/schema';\nimport { CopilotListView } from './CopilotListView';\n\ninterface CopilotsViewProps {\n  copilots: CopilotNextType[];\n  currentTerm: TermNextType;\n}\n\nexport const CopilotsView: React.FC<CopilotsViewProps> = ({\n  copilots,\n  currentTerm,\n}) => {\n  return <CopilotListView dataSource={copilots} currentTerm={currentTerm} />;\n};\n"],"names":["boss_element","reversedMatchedElement","copilot","description","el","params","termId","nextTerm","currentTerm","AurorianAttributeType"],"mappings":"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"}