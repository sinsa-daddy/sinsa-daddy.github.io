{"version":3,"file":"static/js/npm.path-to-regexp@2.4.0.36d7b5e0.js","mappings":"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","sources":["webpack://@sinsa/web/../../node_modules/.pnpm/path-to-regexp@2.4.0/node_modules/path-to-regexp/index.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n  var isEndDelimited = tokens.length === 0\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n"],"names":["module","exports","pathToRegexp","parse","compile","str","options","tokensToFunction","tokensToRegExp","DEFAULT_DELIMITER","DEFAULT_DELIMITERS","PATH_REGEXP","RegExp","join","res","tokens","key","index","path","defaultDelimiter","delimiter","delimiters","pathEscaped","exec","m","escaped","offset","slice","length","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","prefix","escapeGroup","escapeString","substr","matches","Array","i","data","encode","encodeURIComponent","token","segment","value","isArray","TypeError","j","test","String","replace","flags","sensitive","keys","strict","start","end","endsWith","concat","map","route","isEndDelimited","groups","source","match","regexpToRegexp","parts","arrayToRegexp","stringToRegexp"],"sourceRoot":""}